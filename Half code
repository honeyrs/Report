from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
from telethon import TelegramClient
from telethon.tl.functions.account import ReportPeerRequest
from telethon.tl.types import (
    InputReportReasonSpam, InputReportReasonFake, InputReportReasonViolence,
    InputReportReasonPornography, InputReportReasonChildAbuse,
    InputReportReasonCopyright, InputReportReasonIllegalDrugs,
    InputReportReasonPersonalDetails, InputReportReasonOther
)
import time
import logging

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Define the conversation states
SELECT_MODE, REPORT_TYPE, REPORT_REASON, REPORT_DELAY, ENTITY_USERNAME, NUM_REPORTS = range(6)

# API credentials and bot token
api_id = 'YOUR_API_ID'
api_hash = 'YOUR_API_HASH'
bot_token = 'YOUR_BOT_TOKEN'

OWNER_NAME = "SEAECHX"
TELEGRAM_ID = "@H_ONEYSINGH"

report_reasons = {
    1: ("I don't like it", InputReportReasonOther()),
    2: ("Child abuse", InputReportReasonChildAbuse()),
    3: ("Violence", InputReportReasonViolence()),
    4: ("Illegal goods", InputReportReasonIllegalDrugs()),
    5: ("Illegal adult content", InputReportReasonPornography()),
    6: ("Personal data", InputReportReasonPersonalDetails()),
    7: ("Terrorism", InputReportReasonViolence()),
    8: ("Scam or spam", InputReportReasonSpam()),
    9: ("Copyright", InputReportReasonCopyright()),
    10: ("Other", InputReportReasonOther())
}

# Start command - bot will respond with instructions
def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "*Welcome!* This bot allows you to report accounts, channels, groups, and posts.\n\n"
        "*How to use:* \n"
        "1. Use `/report` to start a new report.\n"
        "2. Choose the type of report (account, channel, group, etc.)\n"
        "3. Select the reason for your report.\n"
        "4. Provide the required details.\n"
        "5. Submit your report.\n\n"
        "You can use this bot to report inappropriate content and help maintain a safe environment.\n\n"
        f"Type `/report` to start or `/help` for more information.\n\n"
        f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}",
        parse_mode='Markdown'
    )
    return ConversationHandler.END

# Function to handle reporting options
def report(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("Report Account", callback_data='account')],
        [InlineKeyboardButton("Report Channel", callback_data='channel')],
        [InlineKeyboardButton("Report Group", callback_data='group')],
        [InlineKeyboardButton("Report Bot", callback_data='bot')],
        [InlineKeyboardButton("Report Post Link", callback_data='post')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "*What would you like to report?*\n"
        "Please choose the type of report:\n\n"
        f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return REPORT_TYPE

# Handle the report type selection
def report_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    report_type = query.data
    context.user_data['report_type'] = report_type

    query.edit_message_text(
        "*Select a reason for your report:*\n"
        "1: I don't like it\n2: Child abuse\n3: Violence\n4: Illegal goods\n"
        "5: Illegal adult content\n6: Personal data\n7: Terrorism\n8: Scam or spam\n"
        "9: Copyright\n10: Other\n"
        "Please type the number corresponding to the reason.\n\n"
        f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}",
        parse_mode='Markdown'
    )
    return REPORT_REASON

# Handle the reason selection
def report_reason(update: Update, context: CallbackContext) -> int:
    reason_choice = update.message.text
    if not reason_choice.isdigit() or int(reason_choice) not in report_reasons:
        update.message.reply_text(f"⚠️ Invalid reason. Please select a valid number from 1 to 10.\n\n"
                                  f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
        return REPORT_REASON

    context.user_data['reason'] = report_reasons[int(reason_choice)][1]
    context.user_data['reason_text'] = report_reasons[int(reason_choice)][0]

    update.message.reply_text("⏳ *Please provide the delay (in seconds) between each report.*\n"
                              "For example, if you want a 5-second delay between reports, type `5`.\n\n"
                              f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
    return REPORT_DELAY

# Handle the delay input
def report_delay(update: Update, context: CallbackContext) -> int:
    try:
        delay = int(update.message.text)
        if delay < 1:
            raise ValueError("Delay must be a positive number.")
        context.user_data['delay'] = delay
        update.message.reply_text("🔎 *Please provide the username(s) or ID(s) of the entity/entities to report*.\n"
                                  "For multiple usernames, separate them by commas (e.g., @username1, @username2).\n\n"
                                  f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
        return ENTITY_USERNAME
    except ValueError as e:
        update.message.reply_text(f"⚠️ Invalid delay. Please provide a valid positive integer.\n\n"
                                  f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
        return REPORT_DELAY

# Handle the entity username(s)
def entity_username(update: Update, context: CallbackContext) -> int:
    entity_input = update.message.text
    entities = [e.strip() for e in entity_input.split(",")]
    context.user_data['entities'] = entities

    update.message.reply_text("🔢 *How many reports would you like to submit for each entity?*\n"
                              "Please enter a number.\n\n"
                              f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
    return NUM_REPORTS

# Handle the number of reports
def num_reports(update: Update, context: CallbackContext) -> int:
    try:
        num_reports = int(update.message.text)
        context.user_data['num_reports'] = num_reports
    except ValueError:
        update.message.reply_text(f"⚠️ Invalid number. Please enter a valid integer.\n\n"
                                  f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
        return NUM_REPORTS

    update.message.reply_text(f"🚀 Proceeding with the report(s)...\n\n"
                              f"Owner: {OWNER_NAME} | Telegram ID: {TELEGRAM_ID}")
    # Initiate report submission in Telethon
    context.job_queue.run_once(submit_report, 0, context=context)
    return ConversationHandler.END

# Function to submit the report(s)
async def submit_report(context: CallbackContext) -> None:
    try:
        # Fetch client and session
        session_str = 'YOUR_SESSION_STRING'  # Replace with a valid string session
        client = TelegramClient('report_session', api_id, api_hash, string_session=session_str)
        await client.start()

        # Iterate over each entity
        for entity_username in context.user_data['entities']:
            entity = await client.get_entity(entity_username)

            for i in range(context.user_data['num_reports']):
                # Submit the report
                await client(ReportPeerRequest(
                    peer=entity,
                    reason=context.user_data['reason'],
                    message=f"Reported for {context.user_data['reason_text']}"
                ))

                # Wait for the specified delay
                time.sleep(context.user_data['delayTelegram Bot Reporting Setup
